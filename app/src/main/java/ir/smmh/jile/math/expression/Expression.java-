package ir.smmh.jile.math.expression;

import java.util.LinkedList;
import java.util.List;

import ir.smmh.jile.math.operations.ClosedOperation;
import ir.smmh.jile.common.*;

public class Expression<T> {

    // @SuppressWarnings("unchecked")
    // private final Or<ClosedOperation<T>, T> or = (Or<ClosedOperation<T>, T>)
    // FatOr.singleton();

    private final TraversibleTree<Or<ClosedOperation<T>, T>> tree;

    public Expression() {
        tree = new LinkedTree<Or<ClosedOperation<T>, T>>();
    }

    public T evaluate() {
        return evaluate(tree.getRoot());
    }

    public T evaluate(Or<ClosedOperation<T>, T> node) {

        // node is either an operation or a value
        tree.goTo(node);

        // if the node is an operation
        if (node.isThis()) {

            // get it
            ClosedOperation<T> operation = node.getThis();

            // make a list of args to pass it
            List<T> args = new LinkedList<T>();

            // populate args with the children of node
            for (Or<ClosedOperation<T>, T> child : tree.getChildren(node))
                args.add(evaluate(child));

            // return the result of operating on those args
            return operation.operate(Convert.List_to_Array(args));

        }

        // if the node is a value
        else {

            // return it
            return node.getThat();
        }
    }
}
