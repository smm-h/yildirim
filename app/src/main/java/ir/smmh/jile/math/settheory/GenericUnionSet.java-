package ir.smmh.jile.math;

public class GenericUnionSet<T, S extends Set<T>> implements UnionSet<T> {

    private final Set<T>[] sets;

    @SuppressWarnings("unchecked")
    public GenericUnionSet(S... sets) {
        int n = 0;
        for (int i = 0; i < sets.length; i++) {
            if (sets[i] != null)
                n++;
        }
        this.sets = new Set[n];
        n = 0;
        for (int i = 0; i < sets.length; i++) {
            if (sets[i] != null)
                this.sets[n++] = sets[i];
        }
    }

    @Override
    public boolean contains(T object) {
        for (int i = 0; i < sets.length; i++) {
            if (sets[i].contains(object))
                return true;
        }
        return false;
    }

    @Override
    public T choose() {
        int index = (int) (Math.random() * sets.length);
        return sets[index].choose();
    }

    @Override
    public Integer getCardinality() {
        int cardinality = 0;
        for (int i = 0; i < sets.length; i++) {
            cardinality += sets[i].getCardinality();
        }
        return cardinality;
    }

    @Override
    public boolean isFinite() {
        for (int i = 0; i < sets.length; i++) {
            if (sets[i].isInfinite())
                return false;
        }
        return true;
    }

    @Override
    @SuppressWarnings("unchecked")
    public S flatten() {
        return (S) UnionSet.super.flatten();
    }
}